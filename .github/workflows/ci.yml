name: CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    # Removed GitHub Actions services, as Docker Compose will manage them

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for docker-compose)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version # Verify installation

      # Removed 'Install backend dependencies' step - dependencies are handled by Dockerfile
      # Removed 'Install Redis tools' step - not needed with Docker Compose
      # Removed 'Debug Python Path (before tests)' step - will be debugged within Docker Compose service if needed
      # Removed 'Wait for database and Redis to be ready' step - handled by wait-for-it.sh in Docker Compose

      - name: Run backend tests via Docker Compose
        # No working-directory needed as docker-compose command is run from root
        env:
          # Environment variables are now defined in docker-compose.yml for the 'test' service
          # Pass secrets directly if needed, or ensure they are configured in docker-compose.yml
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AFRICAS_TALKING_API_KEY: ${{ secrets.AFRICAS_TALKING_API_KEY }}
          AFRICAS_TALKING_USERNAME: ${{ secrets.AFRICAS_TALKING_USERNAME }}
          DARAAA_API_KEY: ${{ secrets.DARAAA_API_KEY }}
          PORT: "8000" # Default to avoid compose warning
        run: |
          docker-compose --profile test up --build --abort-on-container-exit --exit-code-from test test # Use docker-compose (old syntax, but for standalone binary)

      - name: Post-test database inspection
        env:
          PORT: "8000"
          PGPASSWORD: "password"
        run: |
          # Run psql in a one-off container attached to the same network, since 'test' has exited
          docker-compose --profile test run --rm -e PGPASSWORD db-test psql -h db-test -U postgres -d test_db -c "\\dt"
          docker-compose --profile test down --volumes # Bring down services after inspection
          
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend # Updated working directory
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend # Updated working directory
        run: npm test

      - name: Build frontend
        working-directory: ./frontend # Updated working directory
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}