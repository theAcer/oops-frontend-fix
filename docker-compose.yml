services:
  frontend:
    build:
      context: ./frontend
      target: dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_URL=https://avcehoxfcyqjllctwjzd.supabase.co
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2Y2Vob3hmY3lxamxsY3R3anpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NDk5OTksImexCI6MjA3MjAyNTk5OX0.quDmqW9YoYM0F0EV6A6a6VNkr7m1ij7t4CI2Bgoe6FM
    depends_on:
      - api
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm run dev
    profiles: ["dev"]

  frontend-prod:
    build:
      context: ./frontend
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_SUPABASE_URL=https://avcehoxfcyqjllctwjzd.supabase.co
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI0ImF2Y2Vob3hmY3lxamllsY3R3anpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NDk5OTksImV4cCI6MjA3MjAyNTk5OX00.quDmqW9YoYM0F0EV6A6a6VNkr7m1ij7t7CI2Bgoe6FM
      - NODE_ENV=production
    depends_on:
      - api
    profiles: ["production"]

  api:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/zidisha_db
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,http://localhost:3001,http://localhost:3002,http://localhost:5173
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --reload
    profiles: ["dev"]

  api-prod:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/zidisha_db
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://frontend-prod:3000,http://localhost:3001,http://localhost:3002
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - PORT=8000 # Added default port to silence warning
    depends_on:
      - db
      - redis
    command: gunicorn -k uvicorn.workers.UvicornWorker -b 0.0.0.0:$PORT main:app
    profiles: ["production"]

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=zidisha_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck: # Existing healthcheck for db
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles: ["dev", "production"] # Explicitly assign profiles

  db-test: # New service for test database
    image: postgres:15
    environment:
      - POSTGRES_DB=test_db # This database will be created for tests
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432" # Use a different port to avoid conflict with main db
    volumes:
      - postgres_test_data:/var/lib/postgresql/data # Separate volume for test data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles: ["test"] # Only active for test profile

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck: # Added healthcheck for redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    profiles: ["dev", "production", "test"] # Redis is used by all profiles

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend-prod
      - api-prod
    profiles: ["production"]

  test: # New service for running backend tests
    build: ./backend # Build from the backend Dockerfile
    environment:
      # Override DATABASE_URL for tests to use a separate test database
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db-test:5432/test_db # Connect to db-test service
      - REDIS_URL=redis://redis:6379
      - ENV_FILE= # Prevent pydantic-settings from loading .env file
      - PYTHONPATH=/app # Ensure Python can find app modules
      - DEBUG=True # Enable debug mode for tests
      - SECRET_KEY=test-secret-key # Required for auth tests
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=http://localhost:3000
      - AFRICAS_TALKING_API_KEY=mock_key
      - AFRICAS_TALKING_USERNAME=mock_user
      - SMS_SENDER_ID=LOYALTY
      - DARAJA_API_URL=https://sandbox.safaricom.co.ke
      - DARAAA_API_KEY=mock_daraja_key
    depends_on:
      db-test: # Depend on the new test database service
        condition: service_healthy # Ensure DB is healthy before running tests
      redis:
        condition: service_healthy # Ensure Redis is healthy before running tests
    volumes:
      - ./backend:/app
    command: |
      echo "DATABASE_URL: $DATABASE_URL"
      echo "Checking db-test resolution..."
      getent hosts db-test
      echo "Checking redis resolution..."
      getent hosts redis
      pytest tests/
    profiles: ["test"] # Only run this service when 'test' profile is active

volumes:
  postgres_data:
  postgres_test_data: # New volume for the test database

networks:
  default:
    name: zidisha-network